# Поисковая система
# https://contest.yandex.ru/contest/24414/run-report/115861980/

"""
-- Описание --
Реализована функция поиска 5 самых релевантных документов, получающая на вход количество документов, список документов, количество 
поисковых запросов и их список. 
Отдельно создана функция для индексации документов, получающая на вход список документов, по которым выполняется поиск. 

-- Доказательство --
Полученные документы, сначала индексируются: каждое слово в каждом документе будем использовать как ключ словоря, значением станет 
вложенный словарь пар "номер документа" - "встречаемость этого слова в этом документе". Индексацию производим один раз.
В основной функции каждый запрос проверяем по словарю индексов и ранжируем: каждое слова запроса ищем в словаре индесов, если нашли -
в словарь ключем добавляем номер текущего документа, значением - сумму встречаемостей совпавших слов. Далее сортируем ключи словаря по
значениям от большего к меньшему и по изначальному порядку документов и возвращаем первые 5.

-- Временная сложность --
Индексация для n документов из K слов займет n * K (K - может быть разным для каждого документа, но будем считать так). Ранжирование
m запросов из L слов займет m * L (L - аналогично K может меняться, но упрощаем). Ранжирование m запросов по n документов займет (n * K) +
(m * L).

-- Пространственная сложность --
Поскольку в данной реализации мы храним все запросы разом, то используем на это n + m памяти. Можно чуть уменьшит потребление памяти, 
если хранить только документы, а запросы выполнять поочередно, однако, в данном случае этого не потребовалось.
Для индексации используется словарь со вложенными словарями. Каждый вложенный словарь имеет размер в n пар ключ/значеие. Внешний словарь 
имеет U ключей, где U - уникальное количество слов во всех докуметах (K * N - дубликаты). То есть таблица индексации имеет размер U * n.
Для ранжирования используем m значений (строк) в итоговом списке ранжирования. Промежуточно для вычислений создаем m словарей с n ключей в 
каждом из них, однако, единовременно существует только один словарь, ключи которого сортируются и 5 из них идут в итоговый список. То есть
максимально используем (U * n) + (m + n).

"""

from typing import List, Tuple
from collections import Counter, defaultdict


def indexed_documents(docs:List[str]) -> dict:
    indexed = {}
    for i in range(len(docs)):
        for word in docs[i].split():
            if indexed.get(word, None) == None:
                indexed[word] = defaultdict(int)
            indexed[word][i] += 1
    return indexed


def searh_relevate(docs:List[str], requests:List[str]) -> List[str]:
    answer = []
    idx_dict = indexed_documents(docs) 
    for i in range(len(requests)):
        rangs = defaultdict(int)
        for word in set(requests[i].split()):
            if idx_dict.get(word, None) != None:
                for k, v in idx_dict[word].items():
                    rangs[k + 1] += v
        answer.append(' '.join(map(str, sorted(rangs.keys(), key=lambda x: [-rangs[x], x])[:5])))
    return answer


def read_input() -> Tuple[int, List[str], int, List[str]]:
    n = int(input())
    docs = []
    for i in range(n):
        docs.append(input())
    m = int(input())
    requests = []
    for i in range(m):
        requests.append(input())
    return docs, requests


def main():
    docs, requests = read_input()
    print(*searh_relevate(docs, requests), sep='\n')


main()