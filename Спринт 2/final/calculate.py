# B. Калькулятор
# https://contest.yandex.ru/contest/22781/run-report/114707781/

"""
-- Описание --
Реализован калькулятор с постфиксной нотацией. Использован дек библиотеки collections. В строке, поступающей на вход 
выполняется замена команды деления (/) на целочисленное деление (// для python). Строка разбивается на список, для каждого элемента
списка выполняется проверка, является ли он числом. Если является - добавляем в дек, если нет, то это операция - достаем из дека 2 
последних элемента и выполняем операцию между предпоследним и последним элементами дека. Результат возвращаем в дек. После 
завершения цикла, печатаем последний элемент дека.

-- Доказательство --
Мы последовательно добавляем численные элементы в дек. если на вход поданы верные данные, при столкновении с операторм в деке лежат 
необходиме нам операнды. Мы извлекаем их в нужном порядке и результат кладем обратно, так, что он оказывается на вершине. Следующее 
число сз входного спсика будет добавлен поверх него, поэтому при столкновении с новым операндом ситуация повториться. После прохода 
по всему входному списку, нужный нам результат окажется на вершине дека.

-- Временная сложность --
Все операции внутри дека выполняются за О(1), однако мы проходимся по всем элементам, полученным на вход. Если опустить количество
обращений к деку, а также операцию замены знака деления - получим сложноть О(n)

-- Пространственная сложность --
Мы храним - входной список размера n и дек размера меньшего, чем n (хотя под него выделяется больше памяти, чем нам нужно), поэтому
можем считать, что пространственная сложность - О(n)

"""

from collections import deque
from typing import List, Tuple


def calculate(raw_inp):
    deque_1 = deque()
    for val in raw_inp:
        if val.lstrip('-').isdigit():
            deque_1.append(int(val))
        else:
            operand_2 = deque_1.pop()
            operand_1 = deque_1.pop()
            answ = eval(f'{operand_1}{val}{operand_2}')
            deque_1.append(int(answ))
    return deque_1.pop()


def read_input() -> List:
    raw_inp = input().replace('/', '//').split()
    return raw_inp


def main():
    raw_inp = read_input()
    answer = calculate(raw_inp)
    print(answer)


main()
