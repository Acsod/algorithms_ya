# Пограничный контроль
# Представьте, что вы работаете пограничником и постоянно проверяете документы людей 
# по записи из базы. При этом допустима ситуация, когда имя человека в базе отличается 
# от имени в паспорте на одну замену, одно удаление или одну вставку символа. Если один
# вариант имени может быть получен из другого удалением одного символа, то человека 
# пропустят через границу. А вот если есть какое-либо второе изменение, то человек грустно
# поедет домой или в посольство.
# Например, если первый вариант —– это «Лена», а второй — «Лера», то девушку пропустят. 
# Также человека пропустят, если в базе записано «Коля», а в паспорте — «оля».
# Однако вариант, когда в базе числится «Иннокентий», а в паспорте написано «ннакентий», 
# уже не сработает. Не пропустят также человека, у которого в паспорте записан «Иинннокентий»,
# а вот «Инннокентий» спокойно пересечёт границу.
# Напишите программу, которая сравнивает имя в базе с именем в паспорте и решает, пропускать 
# человека или нет. В случае равенства двух строк — путешественника, естественно, пропускают.


from typing import Tuple


def check_passport(s1: str, s2: str) -> bool:
    if s1 == s2:
        return True
    if abs(len(s1) - len(s2)) > 1:
        return False

    n, m = len(s1), len(s2)
    # на 1ое место более короткую строку
    if n > m:
        s1, s2 = s2, s1
        n, m = m, n

    chang_total = 0
    i = 0
    j = 0
    while i < n and j < m and chang_total < 2:
        if s1[i] == s2[j]:
            i += 1
            j += 1
        elif len(s1[i:]) < len(s2[j:]):
            j += 1
            chang_total += 1
        elif len(s1[i:]) > len(s2[j:]):
            i += 1
            chang_total += 1
        else:
            i += 1
            j += 1
            chang_total += 1

    if chang_total > 1:
        return False
    else:
        return True

def read_input() -> Tuple[str, str]:
    s1 = input()
    s2 = input()
    return s1, s2


def main() -> None:
    print('OK' if check_passport(*read_input()) else 'FAIL')


main()
